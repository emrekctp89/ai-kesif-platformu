import { createClient } from "npm:@supabase/supabase-js@2";
import { Resend } from "npm:resend";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { corsHeaders } from "../_shared/cors.ts";
function createEmailHtml(username, aiAnalysis, digestData) {
  // Bu, e-posta istemcileriyle uyumlu olmasÄ± iÃ§in inline CSS kullanÄ±r.
  return `
    <!DOCTYPE html><html><body style="font-family: sans-serif; color: #333;">
      <div style="max-width: 600px; margin: auto; border: 1px solid #ddd; padding: 24px;">
        <h1 style="font-size: 24px;">Merhaba ${username}, Ä°ÅŸte Bu Haftaki AI Raporun!</h1>
        <p style="color: #666;">${aiAnalysis.weekly_summary}</p>
        <hr style="border: none; border-top: 1px solid #eaeaea; margin: 20px 0;" />
        <h2 style="font-size: 18px;">âœ¨ Sana Ã–zel Ã–neri</h2>
        <p style="color: #666;">${aiAnalysis.special_suggestion}</p>
        <hr style="border: none; border-top: 1px solid #eaeaea; margin: 20px 0;" />
        <h2 style="font-size: 18px;">ğŸ“ˆ HaftalÄ±k Aktivitelerin</h2>
        <ul>
          <li><strong>Yeni Prompt'larÄ±n:</strong> ${digestData.user_activity.new_prompts_count}</li>
          <li><strong>Yeni Eserlerin:</strong> ${digestData.user_activity.new_showcases_count}</li>
          <li><strong>KazandÄ±ÄŸÄ±n Puan:</strong> ${digestData.user_activity.reputation_earned_weekly}</li>
          <li><strong>Ä°Ã§eriklerin Yeni Oy AldÄ±:</strong> ${digestData.content_performance.new_prompt_votes + digestData.content_performance.new_showcase_votes} kez</li>
        </ul>
        <p style="font-size: 12px; color: #999; margin-top: 30px;">Bu e-postayÄ± AI KeÅŸif Platformu'ndan aldÄ±nÄ±z.</p>
      </div>
    </body></html>
    `;
}
// Bu ana fonksiyon, Edge Function Ã§aÄŸrÄ±ldÄ±ÄŸÄ±nda Ã§alÄ±ÅŸÄ±r
serve(async (req)=>{
  if (req.method === "OPTIONS") {
    return new Response("ok", {
      headers: corsHeaders
    });
  }
  try {
    const supabaseAdmin = createClient(Deno.env.get("SUPABASE_URL") ?? "", Deno.env.get("SUPABASE_SERVICE_ROLE_KEY") ?? "");
    const resend = new Resend(Deno.env.get("RESEND_API_KEY"));
    const apiKey = Deno.env.get("GEMINI_API_KEY");
    if (!apiKey) throw new Error("GEMINI_API_KEY bulunamadÄ±.");
    // 1. ADIM: HaftalÄ±k rapor almak isteyen tÃ¼m kullanÄ±cÄ±larÄ± Ã§ek
    const { data: users, error: usersError } = await supabaseAdmin.from("profiles").select("id, email, username").eq("wants_weekly_digest", true);
    if (usersError) throw usersError;
    if (!users || users.length === 0) {
      return new Response(JSON.stringify({
        message: "Rapor gÃ¶nderilecek kullanÄ±cÄ± bulunmuyor."
      }), {
        headers: {
          ...corsHeaders
        }
      });
    }
    const emailBatch = [];
    // 2. ADIM: Her bir kullanÄ±cÄ± iÃ§in kiÅŸiselleÅŸtirilmiÅŸ rapor oluÅŸtur
    for (const user of users){
      // a. KullanÄ±cÄ±nÄ±n haftalÄ±k verilerini Ã§ek
      const { data: digestData, error: digestError } = await supabaseAdmin.rpc("get_user_weekly_digest_data", {
        p_user_id: user.id
      });
      if (digestError || !digestData) continue; // Bir kullanÄ±cÄ± iÃ§in hata olursa, diÄŸerlerine devam et
      // b. Gemini iÃ§in Ã¶zel prompt'u oluÅŸtur
      const prompt = `
        Sen bir topluluk yÃ¶neticisisin. Bir kullanÄ±cÄ±ya, platformdaki haftalÄ±k aktivitelerini Ã¶zetleyen ve ona Ã¶zel bir tavsiye veren kiÅŸisel bir e-posta metni yazacaksÄ±n. Metin samimi ve motive edici olmalÄ±.
        KULLANICI VERÄ°LERÄ°: ${JSON.stringify(digestData)}
        CevabÄ±nÄ± SADECE aÅŸaÄŸÄ±daki JSON formatÄ±nda ver.
      `;
      const payload = {
        contents: [
          {
            role: "user",
            parts: [
              {
                text: prompt
              }
            ]
          }
        ],
        generationConfig: {
          responseMimeType: "application/json",
          responseSchema: {
            type: "OBJECT",
            properties: {
              weekly_summary: {
                type: "STRING",
                description: "KullanÄ±cÄ±nÄ±n haftalÄ±k aktivitelerini Ã¶zetleyen 1-2 cÃ¼mlelik samimi bir metin."
              },
              special_suggestion: {
                type: "STRING",
                description: "KullanÄ±cÄ±nÄ±n verilerine dayanarak, platformda ilgisini Ã§ekebilecek kiÅŸisel bir Ã¶neri."
              }
            },
            required: [
              "weekly_summary",
              "special_suggestion"
            ]
          }
        }
      };
      // c. Gemini'den kiÅŸiselleÅŸtirilmiÅŸ metni al
      const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;
      const response = await fetch(apiUrl, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(payload)
      });
      if (!response.ok) continue;
      const result = await response.json();
      const aiAnalysis = JSON.parse(result.candidates[0].content.parts[0].text);
      // d. E-posta'yÄ± oluÅŸtur ve toplu gÃ¶nderim iÃ§in listeye ekle
      const htmlBody = createEmailHtml(user.username || user.email, aiAnalysis, digestData);
      emailBatch.push({
        from: Deno.env.get("ADMIN_NOTIF_EMAIL_FROM") ?? "onboarding@resend.dev",
        to: user.email,
        subject: `${user.username || "Merhaba"}, Ä°ÅŸte Bu Haftaki AI Raporun!`,
        html: htmlBody
      });
    }
    // 3. ADIM: OluÅŸturulan tÃ¼m kiÅŸiselleÅŸtirilmiÅŸ e-postalarÄ± toplu olarak gÃ¶nder
    if (emailBatch.length > 0) {
      for (const email of emailBatch){
        await resend.emails.send(email);
      }
    }
    return new Response(JSON.stringify({
      message: `${emailBatch.length} kiÅŸiselleÅŸtirilmiÅŸ rapor baÅŸarÄ±yla gÃ¶nderildi.`
    }), {
      headers: {
        ...corsHeaders,
        "Content-Type": "application/json"
      },
      status: 200
    });
  } catch (error) {
    return new Response(JSON.stringify({
      error: error instanceof Error ? error.message : String(error)
    }), {
      headers: {
        ...corsHeaders,
        "Content-Type": "application/json"
      },
      status: 400
    });
  }
});
